#include <iostream>
using namespace std;

class A
{
public:
    A(int x) : xx(x)
    {
        cout << "A()" << xx << endl;
    }
    ~A()
    {
        cout << "~A()" << xx << endl;
    }

private:
    int xx;
};

A a(1);

int main()
{
    A b(2);
    static A c(3);
    return 0;
}

/*对象的生命周期：
a(1)（全局对象）:生命周期：全局对象 a 在程序启动时被创建，并在程序退出时销毁。它的构造函数在程序开始时执行，析构函数在程序结束时执行。
b(2)（局部对象）:生命周期：b 是 main 函数中的局部对象，只有在 main 函数执行期间存在，main 函数返回时，b 的析构函数会被调用。
c(3)（静态局部对象）:生命周期：静态局部对象 c 的生命周期持续整个程序执行期间，直到程序退出时才销毁。即使它在 main 函数内声明，它在程序启动时就会被构造，并且在程序结束时销毁。
对象的构造和析构顺序：
在程序启动时，全局对象 a 会先被构造。
当 main 函数执行时，静态局部对象 c 会在 main 函数执行之前构造（因为静态变量在函数开始执行之前构造）。
然后，局部对象 b 会在 main 函数的作用域内构造。
程序退出时，析构顺序相反：
首先销毁 局部对象 b。
然后销毁 静态局部对象 c（它的析构函数会在程序结束时执行）。
最后销毁 全局对象 a（它的析构函数会在程序完全退出时执行）。*/
